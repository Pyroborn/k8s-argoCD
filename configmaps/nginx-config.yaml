#apiVersion: v1
#kind: ConfigMap
#metadata:
#  name: nginx-config
#  namespace: microservices
#data:
#  default.conf: |
#    server {
#        listen 80;
#        server_name localhost;

#        # Cache configuration
#        proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=STATIC:10m inactive=60m max_size=100m;

        # Serve static files with caching
#        location / {
#            root /usr/share/nginx/html;
#            try_files $uri $uri/ /index.html;
            
#            # Caching configuration
#            expires 30d;
#            add_header Cache-Control "public, max-age=2592000, immutable";
#            add_header X-Cache-Status $upstream_cache_status;
            
            # Enable compression
#            gzip on;
#            gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;
#            gzip_min_length 1000;
#            gzip_vary on;
#            gzip_proxied any;
#        }

#        # Proxy API requests to the Node.js service
#        location /api {
#            proxy_pass http://localhost:3005;
#            proxy_set_header X-Real-IP $remote_addr;
#            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#            proxy_set_header X-Forwarded-Proto $scheme;
#            proxy_set_header X-Forwarded-Host $host;
#            proxy_http_version 1.1;
#            proxy_set_header Upgrade $http_upgrade;
#            proxy_set_header Connection 'upgrade';
#            proxy_set_header Host $host;
#            proxy_cache_bypass $http_upgrade;
            
            # Don't cache API responses
#            proxy_no_cache 1;
#            proxy_cache_bypass 1;
#        }
        
        # Security headers
#        add_header X-Frame-Options "SAMEORIGIN";
#        add_header X-XSS-Protection "1; mode=block";
#        add_header X-Content-Type-Options "nosniff";
#    } 

apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: microservices
data:
  default.conf: |
    # Cache configuration needs to be in http context, will be included in main nginx.conf
    
    server {
        listen 80;
        server_name localhost;

        # Serve static files with caching
        location / {
            root /usr/share/nginx/html;
            try_files $uri $uri/ /index.html;
            
            # Caching configuration
            expires 30d;
            add_header Cache-Control "public, max-age=2592000, immutable";
            add_header X-Cache-Status $upstream_cache_status;
            
            # Enable compression
            gzip on;
            gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;
            gzip_min_length 1000;
            gzip_vary on;
            gzip_proxied any;
        }

        # Proxy API requests to the Node.js service
        location /api {
            proxy_pass http://localhost:3005;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            
            # Ensure Authorization headers are passed
            proxy_set_header Authorization $http_authorization;
            proxy_pass_header Authorization;
            
            # Don't cache API responses
            proxy_no_cache 1;
            proxy_cache_bypass 1;
            
            # CORS handling
            add_header 'Access-Control-Allow-Origin' $http_origin always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With' always;
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' $http_origin always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With' always;
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Content-Type-Options "nosniff";
    }
  nginx.conf: |
    user  nginx;
    worker_processes  auto;
    
    error_log  /var/log/nginx/error.log notice;
    pid        /var/run/nginx.pid;
    
    events {
        worker_connections  1024;
    }
    
    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
        
        # Cache configuration - properly placed in http context
        proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=STATIC:10m inactive=60m max_size=100m;
        
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';
        
        access_log  /var/log/nginx/access.log  main;
        
        sendfile        on;
        keepalive_timeout  65;
        
        include /etc/nginx/conf.d/*.conf;
    }
