apiVersion: apps/v1
kind: Deployment
metadata:
  name: downloader-service
  namespace: microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: downloader-service
  template:
    metadata:
      labels:
        app: downloader-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3004"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: downloader-service
        image: pyroborn/downloader-service:47
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3004
        envFrom:
        - configMapRef:
            name: shared-env
        - configMapRef:
            name: downloader-service-config
        env:
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: minio-credentials
              key: MINIO_ACCESS_KEY
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: minio-credentials
              key: MINIO_SECRET_KEY
        - name: RABBITMQ_HOST
          value: "rabbitmq"
        - name: RABBITMQ_PORT
          value: "5672"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: jwt-secret
              key: JWT_SECRET
        - name: SERVICE_API_KEY
          valueFrom:
            secretKeyRef:
              name: service-api-keys
              key: SERVICE_API_KEY
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "500m"
            memory: "256Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: 3004
          initialDelaySeconds: 5
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3004
          initialDelaySeconds: 5
          periodSeconds: 10 
---
apiVersion: v1
kind: Service
metadata:
  name: downloader-service
  namespace: microservices
  labels:
    app: downloader-service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3004"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: downloader-service
  ports:
  - port: 3004
    targetPort: 3004
    name: http
---
# Simple HPA using custom metrics
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: downloader-service-hpa
  namespace: microservices
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: downloader-service
  minReplicas: 1
  maxReplicas: 3
  metrics:
  # Scale based on request rate
  - type: Pods
    pods:
      metric:
        name: downloader_requests_per_second
      target:
        type: AverageValue
        averageValue: "5"  # Scale up when > 5 req/sec per pod
  
  # Scale based on active operations
  - type: Pods
    pods:
      metric:
        name: downloader_active_operations
      target:
        type: AverageValue
        averageValue: "3"  # Scale up when > 3 active operations per pod
  
  # Fallback CPU scaling
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      selectPolicy: Min